#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{STKaiti}
#+OPTIONS: \n:t ^:nil  toc:nil
#+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)
* RTK模组需要的资源开销
使用stm32的板子， 使用realtek更新的FreeRTOS的SDK后， 可以正常的跑起来了，Wifi sta模式，驱动初始化完成，没做任何操作时heap内存使用，动态的heap加上静态内存大概80K左右， 在3503上， 南方硅谷的模组使用的内存不到30K，所以内存的差距在50K左右， 在3503或5118上很难再挤出来这么多的内存。
需要继续看下在zephyr上带起的情况
** 静态资源
| module name           | code size | data size | rodata size |
 | 模组使用的AT命令 | 2,854     |       928 |           0 |
 | wpa_supplicant        | 16,606    |       208 |       2,763 |
 | wifi相关API | 11,800    |       796 |         119 |
 | WIFI驱动 | 136,598   |     7,331 |      63,216 |
 | lwip协议栈       | 23,452    |    21,380 |         148 |
 | freertos            | 3,736     |    85,448 |           0 |
 | stm32f4xx  | 2,184     |        16 |           0 |
 | 其他              | 5,054     |       542 |          10 |

** 动态内存
Wifi sta模式，驱动初始化完成，没做任何操作时heap内存使用
| 任务stack占用             | 25832 |
| Wifi分配的动态内存        | 29770 |
| 小于100byte的分配占用内存 |  7406 |

* 320Kbps的音频流需要的buffer情况
目前故事机使用的公众号资源服务器的音乐资源，以及百科问答中点播的歌曲，都是通过http方式来下载的mp3，aac等压缩格式的文件。

这种使用音频文件方式的音乐资源，不像网络通话一样的音频流，使用特别的编码方式，能够通过算法来做去抖，补偿的方式来消除一些网络抖动的影响，目前采用的策略，主要还是靠网络缓冲数据的办法来平滑网络抖动。

** 3503使用psram做缓存的测试情况
所有测试连接的AP都是办公区的ap ACTZH-PAD-PMD
| sram缓存大小 | 缓存时间(秒) | 测试时间段                                                     | 时长 | 卡顿次数 | 说明                                                                                                                                                                          |
| 80K          |            2 | 18:00 ~ 10:00                                                  |   16 |       10 | 在夜晚，干扰少，卡顿多为1、2秒内卡顿，早上10点一次出现10秒没数据                                                                                                              |
| 120K         |            3 | 13:00 ~ 16:00                                                  |    3 |       15 | 下午测试，卡顿也严重，多次连续数据量不足连续卡顿，出现一次10秒没数据                                                                                                          |
| 240K         |            6 | 13:30 ~ 17:00                                                  |  3.5 |        6 | 下午测试，都是长时间数据量不足卡顿                                                                                                       |
| 360K         |            9 | 9:00 ~ 12:00                                                   |    3 |       10 | 早上测试，长时间数据量不足卡顿                                                                                                         |
| 512K         |           12 | 9:30 ~ 13:30                                                   |    4 |       14 | 上班时间测试，长时间数据量不足卡顿                                                                                                     |
| 1024K        |          25s | 9/21 15:49 ~ 18:40, 9/23 10:16 ~ 16:59,  9/25(sat) 9:8 ~ 17:24 |   17 |    5(12) | , 上班时间及周六的测试，都是长时间数据量不足（每秒接收数据不足320kbps）导致连续卡顿                                               |

Note:
+ 公共AP PMD是办公区的一个AP，比测试组的环境稍好，但一般比家庭网络会差很多
+ 在夜晚网络情况较好的时候， 就算80K的buffer也不太容易遇到卡顿
+ 在上午网络性能比较恶劣的情况下， 只有加大到1024K的buffer，卡顿才会比较少
+ 长时间数据量不足卡顿
  长时间数据量不足（每秒接收数据不足320kbps）导致缓冲的数据全部消耗完以引起的卡顿
+ 1024K缓存的测试
  其中有12次在开始下载时就出现下载数据量不足导致卡顿，这种情况，即使使用卡缓存还是会出现卡顿, 上班时间及周六的测试，都是长时间数据量不足（每秒接收数据不足320kbps）导致连续卡顿 |
** 其他对手样机测试情况
*** 愤怒的小鸟
机子tcp传输window：11200
机子内网络数据缓存量约：60~80Kbyte（从无卡时开始下载数据量估算）
点播：即使有卡，也不进行缓存，所以有卡与没卡，多点几首，卡顿效果一样的；
机子下载音乐到卡速率（不播放）：750kbps；
测试的码率是256Kbps

| 测试条件 | AP           | 测试结果                          |
| 无卡     | 单独搭建的ap | 无其他人使用该ap，播放不卡顿      |
| 无卡     | 单独搭建的ap | 无其他人使用该ap，播放出现2次卡顿 |
| 无卡     | 单独搭建的ap | 一台手机连上该ap，浏览网页或播放视频，多次卡顿 |
| 有卡     | 单独搭建的ap | 无其他人使用该ap，播放不卡顿      |
| 有卡     | 单独搭建的ap |  一台手机连上该ap，浏览网页或播放视频，多次卡顿 |

Note：
+ 单独搭建AP性能
  单独搭建的ap，网络条件算作比较好的ap
*** ASU WIFI音箱
+ Tcp window
  大小为size：21000
  网络缓存数据量：大于80Kbyte    （从一次最大缓存的数据量计算）
  按这个缓存量计算，可以缓存10s的数据，并且播放码率较低，不容易出现卡顿，而干扰较大的情况下，还是会出现卡顿。
+ 播放的音乐码率：64kbps
  公众号上见到的音乐、在线广播，码率都是64kbps
  连接公共AP ACTZH-PAD-PMD，播放音乐，用一个手机连接该ap，切换视频播放，ASUWIFI音箱还是有时会出现音声卡顿。
* 几点思考
+ 在网络不太差的情况下， 资源比较丰富的IOT芯片，还是比较大的可能做到高码率不卡顿的
+ 需要想办法尽快找到市场能够接受的卡顿标准。如果标准较高的话， 大部分的iot芯片都应该不可以。

* 移植
rtk的移植封装还是比较好的，对外部依赖的函数并不是太多，并且都提供了参考实现。
** 硬件接口
支持SPI接口和SDIO接口，中断可以使用GPIO的方式，因此可以在我们的5116平台使用
** Wlanlib
跟wifi相关的代码主要wlan.lib中， 该库除了依赖外部的C库外，
在osdep_service函数指针表中，实现了大部分依赖os的实现，
 osdep_service_ops osdep_service = {
        _freertos_malloc,		//rtw_vmalloc
        _freertos_zmalloc,		//rtw_zvmalloc
        _freertos_mfree,			//rtw_vmfree
        _freertos_malloc, //rtw_malloc
        _freertos_zmalloc, //rtw_zmalloc
        _freertos_mfree, //rtw_mfree
        _freertos_memcpy, //rtw_memcpy
        _freertos_memcmp, //rtw_memcmp
        _freertos_memset, //rtw_memset
        _freertos_init_sema, //rtw_init_sema
        _freertos_free_sema, //rtw_free_sema
        _freertos_up_sema, //rtw_up_sema
        _freertos_down_sema, //rtw_down_sema
        _freertos_mutex_init, //rtw_mutex_init
        _freertos_mutex_free, //rtw_mutex_free
        _freertos_mutex_get, //rtw_mutex_get
        _freertos_mutex_put, //rtw_mutex_put
        _freertos_enter_critical,		//rtw_enter_critical
        _freertos_exit_critical,		//rtw_exit_critical
        NULL,		//rtw_enter_critical_bh
        NULL,		//rtw_exit_critical_bh
        _freertos_enter_critical_mutex,		//rtw_enter_critical_mutex
        _freertos_exit_critical_mutex,		//rtw_exit_critical_mutex
        _freertos_spinlock_init, //rtw_spinlock_init
        _freertos_spinlock_free, //rtw_spinlock_free
        _freertos_spinlock, //rtw_spin_lock
        _freertos_spinunlock, //rtw_spin_unlock
        _freertos_spinlock_irqsave,	//rtw_spinlock_irqsave
        _freertos_spinunlock_irqsave,//rtw_spinunlock_irqsave
        _freertos_init_xqueue,//rtw_init_xqueue
        _freertos_push_to_xqueue,//rtw_push_to_xqueue
        _freertos_pop_from_xqueue,//rtw_pop_from_xqueue
        _freertos_deinit_xqueue,//rtw_deinit_xqueue
        _freertos_get_current_time, //rtw_get_current_time
        _freertos_systime_to_ms, //rtw_systime_to_ms
        _freertos_systime_to_sec, //rtw_systime_to_sec
        _freertos_ms_to_systime, //rtw_ms_to_systime
        _freertos_sec_to_systime, //rtw_sec_to_systime
        _freertos_msleep_os, //rtw_msleep_os
        _freertos_usleep_os, //rtw_usleep_os
        _freertos_mdelay_os, //rtw_mdelay_os
        _freertos_udelay_os, //rtw_udelay_os
        _freertos_yield_os, //rtw_yield_os

        _freertos_init_timer, //rtw_init_timer
        _freertos_set_timer, //rtw_set_timer
        _freertos_cancel_timer_ex, //rtw_cancel_timer
        _freertos_del_timer, //rtw_del_timer

        _freertos_ATOMIC_SET, //ATOMIC_SET
        _freertos_ATOMIC_READ, //ATOMIC_READ
        _freertos_ATOMIC_ADD, //ATOMIC_ADD
        _freertos_ATOMIC_SUB, //ATOMIC_SUB
        _freertos_ATOMIC_INC, //ATOMIC_INC
        _freertos_ATOMIC_DEC, //ATOMIC_DEC
        _freertos_ATOMIC_ADD_RETURN, //ATOMIC_ADD_RETURN
        _freertos_ATOMIC_SUB_RETURN, //ATOMIC_SUB_RETURN
        _freertos_ATOMIC_INC_RETURN, //ATOMIC_INC_RETURN
        _freertos_ATOMIC_DEC_RETURN, //ATOMIC_DEC_RETURN

        _freertos_modular64, //rtw_modular64
        _freertos_get_random_bytes,			//rtw_get_random_bytes
        _freertos_GetFreeHeapSize,		//rtw_getFreeHeapSize

        _freertos_create_task,		//rtw_create_task
        _freertos_delete_task,		//rtw_delete_task
        _freertos_wakeup_task,		//rtw_wakeup_task

        _freertos_thread_enter,		//rtw_thread_enter
        _freertos_thread_exit,		//rtw_thread_exit

        _freertos_timerCreate,           //rtw_timerCreate,
        _freertos_timerDelete,           //rtw_timerDelete,
        _freertos_timerIsTimerActive,    //rtw_timerIsTimerActive,
        _freertos_timerStop,             //rtw_timerStop,
        _freertos_timerChangePeriod      //rtw_timerChangePeriod
};

除此之外，还依赖与如下接口。
| Set_WLAN_Power_Off          | wifi电源关闭             |
| Set_WLAN_Power_On           | wifi电源打开             |
| WLAN_BSP_Transfer           | 传输数据                 |
| config_method               | WIFI的配置方式           |
| is_promisc_callback_unlock  | 混杂模式回调             |
| netif_get_hwaddr            | 获取wifi的mac地址        |
| netif_is_valid_IP           | 判断ip的正确性           |
| netif_pre_sleep_processing  | wifi休眠前处理           |
| netif_post_sleep_processing | wifi休眠后处理           |
| netif_rx                    | 上发网络数据到协议栈     |
| os_get_random               | 获取随机数               |
| os_malloc                   | 分配动态内存             |
| os_mfree                    | 释放动态内存             |
| os_strdup                   | 复制string               |
| os_xqueue_send              | 队列发送                 |
| g_ap_sta_num                | ap模式支持的链接个数     |
| paff_array                  | 混杂模式的包过滤表       |
| queue_for_credential        | WPS功能                  |
| save_and_cli                | 保存中断标志，进入临界区 |
| restore_flags               | 恢复标志，退出临界区     |
| rltk_wlan_get_ip            | 获取IP                   |
| rltk_wlan_set_netif_info    | 设置网络接口信息         |
| wext_get_enc_ext            | wpa支持                  |
| wext_get_mode               | wpa获取加密模式          |
| wext_get_ssid               | 获取ssid                 |
| wext_set_gen_ie             | wpa支持                  |
| wext_wlan_indicate          | wpa支持                  |
| wps_password_id             | wpa支持                  |
| wps_pin_code                | wpa支持                  |
* 需要的支持
+ 动态内存的估计
  我们只需要支持STA模式，WIFI的性能有2~3Mbps的性能就可以满足要求了， 在SPI模式，或者SDIO模式下， 最小需要的动态内存是多少，这个希望能够帮忙给下
+ 提供mips版本的，基于GCC工具链的库
  目前拿到的SDK中，只有keil编译环境的，arm的库。
  因此需要一个mips4k版本的，gcc编译环境的库，具体的编译环境我们可以提供
+ 提供一个可以运行sdk的板子和模组
  目前的板子和模组是我们自己搭建的，现在在arm平台上不能全部的跑起来，因此需要提供一个可以用的板子，或者告诉我们在哪里可以买到
  如果有mips的板子，提供一个可以实际运行的mips的板子会更好。
+ 移植过程中遇到问题需要提供技术支持
  目前看起来是可以移植的，但后续移植中可能会遇到一些问题，需要提供技术支持才可以。
  最好能够提供带有调试打印的库，方便问题定位。
